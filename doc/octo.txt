*octo.txt*  Octo.nvim

Author:  Alvaro Mu√±oz <https://github.com/pwntester>
License: MIT License


INTRODUCTION                                    *octo*

Edit and review GitHub issues and pull requests from the comfort of your
favorite editor.

Use `gO` to access the contents of this helpfile.


USAGE                                           *octo-usage*

Edit the issue title, body, or comments, as a regular buffer and use `:w(rite)`
to sync the issue with GitHub.


COMMANDS                                        *octo-commands*

There is only one main command: `Octo <object> <action> [args]` command. If no
command is passed, the argument to `Octo` is treated as URL from where an
issue or PR number and repo are extracted.

Mappings for many of the commands can be easily configured - see |octo-config|.

See |octo-command-examples| for examples.


:Octo issue [action] {args}                     *octo-commands-issue*

  close                 Close the current issue.
  reopen                Reopen the current issue.
  create {repo}         Creates a new issue in the current or specified repo.
  edit [number] {repo}  Edits issue/PR with the given number in the current or
                        specified repo.
  list [repo] {key=val} Lists all issues satisfying a given filter.
                        In-menu mappings: 
                          <CR>    Edit issue.
                          <C-b>   Open issue in browser.
                          <C-y>   Copy URL to system clipboard.
                        Available filter keys: see <https://docs.github.com/en/graphql/reference/input-objects#issuefilters>
  search                Live issue search.
  reload                Reload issue. Same as doing `e!`.
  browser               Open current issue in the browser.
  url                   Copies the URL of the currently opened issue to the
                        system clipboard.


:Octo pr [action] {args}                        *octo-commands-pr*

  Omit action to open the pull request matching the current branch.

  list [repo] {key=val} Lists all PRs satisfying a given filter.
                        In-menu mappings: 
                          <CR>    Edit PR.
                          <C-b>   Open PR in browser.
                          <C-o>   Checkout PR.
                          <C-y>   Copy URL to system clipboard.
                        Available filter keys: see <https://docs.github.com/en/graphql/reference/input-objects#issuefilters>
  search                Live PR search.
  edit [number] {repo}  Edits issue/PR with the given number in the current or
                        specified repo. 
  reopen                Reopen the current PR.
  create                Creates a new PR for the current branch
  close                 Close the current PR.
  checkout              Checkout the PR.
  commits               List all PR commits.
  changes               Show all PR changes (diff hunks).
  diff                  Show PR diff.
  merge [strategy]      Merge the current PR using the specified strategy.
                        Strategies: `commit`, `rebase`, `squash`, `delete`
  ready                 Mark a draft PR as ready for review.          
  draft                 Send a ready for review PR back to draft.          
  checks                Show the status of all checks run on the PR.
  reload                Reload PR. Same as doing `e!`.
  browser               Open current PR in the browser.
  url                   Copies the URL of the currently opened PR to the
                        system clipboard.


:Octo repo [action]                             *octo-commands-repo*

  list                  Lists repos the user owns, contributes, or belongs to.
  fork                  Fork repo.
  browser               Open current repo in the browser.
  url                   Copies the URL of the current repo to the system 
                        clipboard.
  view                  Open a repo by path ({organization}/{name}).


:Octo gist [action]                             *octo-commands-gist*

  list [repo] {key=val} Lists user gists.
                        In-menu mappings: 
                          <CR>    Append Gist to buffer.
                        Available filter keys: `repo`, `public` `secret`.


:Octo comment [action]                          *octo-commands-comment*

  add                   Add a new comment.
  delete                Delete a comment.


:Octo thread [action]                           *octo-commands-thread*

  resolve               Mark a review thread as resolved.
  unresolve             Mark a review thread as unresolved.


:Octo label [action]                            *octo-commands-label*

  add [label]           Add specified label or from the available label menu.
  remove [label]        Remove the specified label or from the menu.
  create [label]        Create a new label.


:Octo assignee [action]                         *octo-commands-assignee*

  add [login]           Assign a user.
  remove [login]        Unassign a user


:Octo reviewer [action]                         *octo-commands-reviewer*

  add [login]           Assign a PR reviewer.


:Octo reaction [reaction]                       *octo-commands-reaction*

  thumbs_up, +1         Add üëç reaction.
  thumbs_down, -1       Add üëé reaction.
  eyes                  Add üëÄ reaction.
  laugh                 Add üòÑ reaction.
  confused              Add üòï reaction.
  rocket                Add üöÄ reaction.
  heart                 Add ‚ù§Ô∏è reaction.
  hooray, party, tada   Add üéâ reaction.


:Octo card [action]                             *octo-commands-card*

  add                   Assign issue/PR to a project new card.
  remove                Delete project card.
  move                  Move project card to different project/column.


:Octo review [action]                           *octo-commands-review*

  Omit action to resume a review if one is in progress, or start a new one if
  no review is in progress.

  start                 Start a new review.
  submit                Submit the review.
  resume                Edit a pending review for the current PR.
  discard               Deletes a pending review for the current PR, if any.
  comments              View pending review comments.
  commit                Pick a specific commit to review.
  close                 Close the review window and return to the PR.

:Octo actions                                   *octo-commands-actions*

  Lists all available Octo actions
  
:Octo search [query]                            *octo-commands-search*

  Search GitHub for issues and PRs matching the query (https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests)

COMMAND EXAMPLES                                *octo-command-examples*
>
  Octo https://github.com/pwntester/octo.nvim/issues/12
  Octo issue create
  Octo issue create pwntester/octo.nvim
  Octo comment add
  Octo reaction add hooray
  Octo issue edit pwntester/octo.nvim 1
  Octo issue edit 1
  Octo issue list createdBy=pwntester
  Octo issue list neovim/neovim labels=bug,help\ wanted states=OPEN
  Octo search assignee:pwntester is:pr
<


CONFIGURATION                                   *octo-config*

See the README (<https://github.com/pwntester/octo.nvim>) for an example
configuration in Lua.


PR REVIEW                                       *octo-pr-review*

 Open the PR (eg: `Octo <PR url>` or `Octo pr list` or `Octo pr edit <PR number>`)
* Start a review with `Octo review start` or resume a pending review with `Octo review resume`
 A new tab will show a panel with changed files and two windows showing the diff on any of them.
 Change panel entries with `]q` and `[q` or by selecting an entry in the window.
* Add comments with `<localleader>ca` or suggestions with `<localleader>sa` on single or
  multiple visual-selected lines
  * A new buffer will appear in the alternate diff window. Cursor will be
    positioned in the new buffer
  * When ready, save the buffer to commit changes to GitHub
  * Move back to the diff window and move the cursor, the thread buffer will
    hide
* Hold the cursor on a line with a comment to show a thread buffer with all
  the thread comments
  * To modify, delete, react or reply to a comment, move to the window
    containing the thread buffer
  * Perform any operations as if you were in a regular issue buffer
* Review pending comments with `Octo review comments`
  * Use <CR> to jump to the selected pending comment
* If you want to review a specific commit, use `Octo review commit` to pick a commit. 
  * The file panel will get filtered to show only files changed by that commit.
  * Any comments placed on these files will be applied at that specific commit level and will be
    added to the pending review.
* When ready, submit the review with `Octo review submit`
* A new float window will pop up. Enter the top level review comment and exit
  to normal mode. Then press <C-m> to submit a comment, <C-a> to approve
  it or <C-r> to request changes


COMPLETION                                      *octo-completion*

Octo provides a built-in omnifunc completion for issues, PRs and users that you can trigger using `<C-x><C-o>`. Alternately, if you use [`nvim-cmp`](https://github.com/hrsh7th/nvim-cmp) for completion, you can use the [`cmp-git`](https://github.com/petertriho/cmp-git/) source to provide issues, PRs, commits and users completion.


HIGHLIGHT GROUPS                                *octo-highlights*

  Highlight group             Defaults to~

  `OctoDirty`                   `ErrorMsg`         
  `OctoIssueTitle`              `PreProc`          
  `OctoIssueId`                 `Question`         
  `OctoEmpty`                   `Comment`          
  `OctoFloat`                   `NormalNC`         
  `OctoDate`                    `Comment`          
  `OctoSymbol`                  `Comment`          
  `OctoTimelineItemHeading`     `Comment`          
  `OctoDetailsLabel`            `Title`            
  `OctoMissingDetails`          `Comment`          
  `OctoDetailsValue`            `Identifier`       
  `OctoDiffHunkPosition`        `NormalFloat`      
  `OctoCommentLine`             `TabLineSel`       
  `OctoEditable`                `NormalFloat` bg   
  `OctoViewer`                  GitHub color     
  `OctoBubble`                  `NormalFloat`      
  `OctoBubbleGreen`             GitHub color     
  `OctoBubbleRed`               GitHub color     
  `OctoUser`                    `OctoBubble`       
  `OctoUserViewer`              `OctoViewer`       
  `OctoReaction`                `OctoBubble`       
  `OctoReactionViewer`          `OctoViewer`       
  `OctoPassingTest`             GitHub color     
  `OctoFailingTest`             GitHub color     
  `OctoPullAdditions`           GitHub color     
  `OctoPullDeletions`           GitHub color     
  `OctoPullModifications`       GitHub color     
  `OctoStateOpen`               GitHub color     
  `OctoStateClosed`             GitHub color     
  `OctoStateMerge`              GitHub color     
  `OctoStatePending`            GitHub color     
  `OctoStateApproved`           `OctoStateOpen`    
  `OctoStateChangesRequested`   `OctoStateClosed`  
  `OctoStateCommented`          `Normal`           
  `OctoStateDismissed`          `OctoStateClosed`  

The term "GitHub color" refers to the colors used in the WebUI.

The (addition) "viewer" means the user of the plugin or more precisely the
user authenticated via the `gh` CLI tool used to retrieve the data from
GitHub.


FAQ                                             *octo-faq*

How can I disable bubbles for XYZ?~

  Each text-object that makes use of a bubble (except labels) do use their own
  highlight group that linkes per default to the main bubble highlight group.
  To disable most bubbles at once you can simply link `OctoBubble` to
  `Normal`. To only disable them for a certain plain do the same for the
  specific sub-group (e.g. `OctoUser`).

Why do my issue titles or markdown syntax do not get highlighted properly?~

  The title, body and comments of an issue or PR are special as they get
  special highlighting applied and is an editable section. Due to the latter
  property it gets the `OctoEditable` highlighting via a special signs
  `linehl` setting. This takes precedence over the buffer internal highlights.
  To only get the background highlighted by the editable section, set
  `OctoEditable` to a highlight with a background color definition only.

Why am I getting authentication error from gh?~

  This means that are either using a GITHUB_TOKEN to authenticate or `gh` is
  not authenticated.

  In case of the former, run:
>bash
  GITHUB_TOKEN= gh auth login
<
  ...and choose a method to authorise access for `gh`.
  `gh` must store the creds so it can work in a subshell.

Can I use treesitter markdown parser with octo buffers?~

  Just add the following lines to your TreeSitter config:
>lua
  vim.treesitter.language.register('markdown', 'octo')
<

*How can I filter PRs by filter keys that aren't available?~

  You can use the search command `:Octo search [query]`.
  The [search syntax](https://docs.github.com/en/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax) and available search terms are available in [GitHub documentation](https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests#search-by-author).

  For example to search for PRs with author you can use this command:

>vim
  :Octo search is:pr author:pwntester repo:github/codeql
<

  Note: You need to provide the `repo`, otherwise it will search for every PR by that user.

*How to enable autocompletion for issues/prs (`#`) and users (`@`)?~

  Add the following mappings for `octo` file type:

>lua
  vim.keymap.set("i", "@", "@<C-x><C-o>", { silent = true, buffer = true })
  vim.keymap.set("i", "#", "#<C-x><C-o>", { silent = true, buffer = true })


I can't see my v2 projects in issues and/or pull requests!~

  (and I see a warning when I open them)

  You are missing a scope from the token gh uses. You can add the scope to
  your gh token with

  `gh auth refresh -s read:project`

  Alternatively if you want to be able to modify projects (i.e. add/remove
  cards) you need to add the `project` scope to your token instead.

  If you don't care about projects v2 you can suppress the warning by setting
  `suppress_missing_scope.projects_v2 = true` in your Octo config.

How can I disable default key mappings?~
  set `mappings_disable_default = true` in user config.

CREDITS                                         *octo-credits*

The PR review panel is heavily inspired by diffview.nvim: 
<https://github.com/sindrets/diffview.nvim>


LICENSE                                         *octo-license*

MIT license.


 vim:tw=78:et:ft=help:norl:
